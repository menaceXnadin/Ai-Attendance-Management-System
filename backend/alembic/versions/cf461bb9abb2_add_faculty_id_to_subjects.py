"""add faculty_id to subjects

Revision ID: cf461bb9abb2
Revises: 5b46aee9f484
Create Date: 2025-07-24 23:46:57.394417

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cf461bb9abb2'
down_revision: Union[str, Sequence[str], None] = '5b46aee9f484'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_classes_active'), table_name='classes')
    op.drop_index(op.f('idx_classes_name_year'), table_name='classes')
    op.drop_index(op.f('idx_classes_teacher'), table_name='classes')
    op.drop_table('classes')
    op.drop_index(op.f('idx_face_logs_created'), table_name='face_recognition_logs')
    op.drop_index(op.f('idx_face_logs_status'), table_name='face_recognition_logs')
    op.drop_table('face_recognition_logs')
    op.alter_column('admins', 'permissions',
               existing_type=postgresql.ARRAY(sa.TEXT()),
               type_=sa.JSON(),
               postgresql_using='to_json(permissions)',
               comment=None,
               existing_comment='Array of permission strings for admin',
               existing_nullable=True)
    op.alter_column('admins', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('admins', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_admins_user_id'), table_name='admins')
    op.create_index(op.f('ix_admins_id'), 'admins', ['id'], unique=False)
    op.drop_constraint(op.f('admins_user_id_fkey'), 'admins', type_='foreignkey')
    op.create_foreign_key(None, 'admins', 'users', ['user_id'], ['id'])
    op.add_column('ai_insights', sa.Column('confidence', sa.Float(), nullable=True))
    op.add_column('ai_insights', sa.Column('is_active', sa.Boolean(), nullable=True))
    op.alter_column('ai_insights', 'data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               comment=None,
               existing_comment='Additional data for AI insight, stored as JSONB',
               existing_nullable=True)
    op.alter_column('ai_insights', 'priority',
               existing_type=postgresql.ENUM('low', 'medium', 'high', name='insight_priority'),
               type_=sa.Enum('low', 'medium', 'high', name='insight_priority', native_enum=False),
               nullable=False,
               existing_server_default=sa.text("'medium'::insight_priority"))
    op.alter_column('ai_insights', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('ai_insights', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.drop_index(op.f('idx_ai_insights_active'), table_name='ai_insights', postgresql_where='(is_archived = false)')
    op.drop_index(op.f('idx_ai_insights_priority'), table_name='ai_insights')
    op.drop_index(op.f('idx_ai_insights_student'), table_name='ai_insights')
    op.drop_index(op.f('idx_ai_insights_type'), table_name='ai_insights')
    op.drop_index(op.f('idx_ai_insights_unread'), table_name='ai_insights', postgresql_where='(is_read = false)')
    op.create_index(op.f('ix_ai_insights_id'), 'ai_insights', ['id'], unique=False)
    op.drop_constraint(op.f('ai_insights_student_id_fkey'), 'ai_insights', type_='foreignkey')
    op.create_foreign_key(None, 'ai_insights', 'students', ['student_id'], ['id'])
    op.drop_column('ai_insights', 'updated_at')
    op.drop_column('ai_insights', 'is_archived')
    op.drop_column('ai_insights', 'is_read')
    op.drop_column('ai_insights', 'confidence_score')
    op.alter_column('attendance_records', 'date',
               existing_type=sa.DATE(),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('attendance_records', 'status',
               existing_type=postgresql.ENUM('present', 'absent', 'late', name='attendance_status'),
               type_=sa.Enum('present', 'absent', 'late', name='attendance_status', native_enum=False),
               nullable=False,
               existing_server_default=sa.text("'present'::attendance_status"))
    op.alter_column('attendance_records', 'method',
               existing_type=postgresql.ENUM('manual', 'face', 'other', name='attendance_method'),
               type_=sa.Enum('manual', 'face', 'other', name='attendance_method', native_enum=False),
               nullable=False,
               existing_server_default=sa.text("'manual'::attendance_method"))
    op.alter_column('attendance_records', 'confidence_score',
               existing_type=sa.NUMERIC(precision=3, scale=2),
               type_=sa.Float(),
               comment=None,
               existing_comment='Confidence score for face recognition or attendance method',
               existing_nullable=True)
    op.alter_column('attendance_records', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_attendance_date'), table_name='attendance_records')
    op.drop_index(op.f('idx_attendance_method'), table_name='attendance_records')
    op.drop_index(op.f('idx_attendance_status'), table_name='attendance_records')
    op.drop_index(op.f('idx_attendance_student_date'), table_name='attendance_records')
    op.create_index(op.f('ix_attendance_records_id'), 'attendance_records', ['id'], unique=False)
    op.drop_constraint(op.f('attendance_records_student_id_fkey'), 'attendance_records', type_='foreignkey')
    op.create_foreign_key(None, 'attendance_records', 'students', ['student_id'], ['id'])
    op.drop_column('attendance_records', 'updated_at')
    op.drop_column('attendance_records', 'time_in')
    op.drop_column('attendance_records', 'time_out')
    op.drop_column('attendance_records', 'location')
    op.alter_column('marks', 'exam_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=False)
    op.alter_column('marks', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('notifications', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('students', 'face_encoding',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment=None,
               existing_comment='JSON-encoded face encoding for recognition',
               existing_nullable=True)
    op.alter_column('students', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('students', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_students_class_year'), table_name='students')
    op.drop_index(op.f('idx_students_student_id'), table_name='students')
    op.drop_index(op.f('idx_students_user_id'), table_name='students')
    op.drop_index(op.f('students_face_encoding_not_null_idx'), table_name='students', postgresql_where='(face_encoding IS NOT NULL)')
    op.drop_constraint(op.f('students_student_id_key'), 'students', type_='unique')
    op.drop_index(op.f('students_user_id_idx'), table_name='students')
    op.create_index(op.f('ix_students_id'), 'students', ['id'], unique=False)
    op.create_index(op.f('ix_students_student_id'), 'students', ['student_id'], unique=True)
    op.drop_constraint(op.f('students_user_id_fkey'), 'students', type_='foreignkey')
    op.create_foreign_key(None, 'students', 'users', ['user_id'], ['id'])
    op.drop_column('students', 'name')
    op.drop_column('students', 'faculty')
    op.add_column('subjects', sa.Column('faculty_id', sa.Integer(), nullable=True))
    op.alter_column('subjects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subjects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('subjects_code_key'), 'subjects', type_='unique')
    op.create_index(op.f('ix_subjects_code'), 'subjects', ['code'], unique=True)
    op.create_foreign_key(None, 'subjects', 'faculties', ['faculty_id'], ['id'])
    op.alter_column('users', 'role',
               existing_type=postgresql.ENUM('student', 'admin', 'faculty', name='user_role'),
               type_=sa.Enum('student', 'admin', 'faculty', name='user_role', native_enum=False),
               existing_nullable=False,
               existing_server_default=sa.text("'student'::user_role"))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_index(op.f('idx_users_role'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'role',
               existing_type=sa.Enum('student', 'admin', 'faculty', name='user_role', native_enum=False),
               type_=postgresql.ENUM('student', 'admin', 'faculty', name='user_role'),
               existing_nullable=False,
               existing_server_default=sa.text("'student'::user_role"))
    op.drop_constraint(None, 'subjects', type_='foreignkey')
    op.drop_index(op.f('ix_subjects_code'), table_name='subjects')
    op.create_unique_constraint(op.f('subjects_code_key'), 'subjects', ['code'], postgresql_nulls_not_distinct=False)
    op.alter_column('subjects', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('subjects', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_column('subjects', 'faculty_id')
    op.add_column('students', sa.Column('faculty', sa.VARCHAR(length=100), autoincrement=False, nullable=False))
    op.add_column('students', sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'students', type_='foreignkey')
    op.create_foreign_key(op.f('students_user_id_fkey'), 'students', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_students_student_id'), table_name='students')
    op.drop_index(op.f('ix_students_id'), table_name='students')
    op.create_index(op.f('students_user_id_idx'), 'students', ['user_id'], unique=False)
    op.create_unique_constraint(op.f('students_student_id_key'), 'students', ['student_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('students_face_encoding_not_null_idx'), 'students', ['id'], unique=False, postgresql_where='(face_encoding IS NOT NULL)')
    op.create_index(op.f('idx_students_user_id'), 'students', ['user_id'], unique=False)
    op.create_index(op.f('idx_students_student_id'), 'students', ['student_id'], unique=False)
    op.create_index(op.f('idx_students_class_year'), 'students', ['faculty', 'year'], unique=False)
    op.alter_column('students', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('students', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('students', 'face_encoding',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               comment='JSON-encoded face encoding for recognition',
               existing_nullable=True)
    op.alter_column('notifications', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('marks', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('marks', 'exam_date',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.add_column('attendance_records', sa.Column('location', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('attendance_records', sa.Column('time_out', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('attendance_records', sa.Column('time_in', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('attendance_records', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'attendance_records', type_='foreignkey')
    op.create_foreign_key(op.f('attendance_records_student_id_fkey'), 'attendance_records', 'students', ['student_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_attendance_records_id'), table_name='attendance_records')
    op.create_index(op.f('idx_attendance_student_date'), 'attendance_records', ['student_id', 'date'], unique=False)
    op.create_index(op.f('idx_attendance_status'), 'attendance_records', ['status'], unique=False)
    op.create_index(op.f('idx_attendance_method'), 'attendance_records', ['method'], unique=False)
    op.create_index(op.f('idx_attendance_date'), 'attendance_records', ['date'], unique=False)
    op.alter_column('attendance_records', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('attendance_records', 'confidence_score',
               existing_type=sa.Float(),
               type_=sa.NUMERIC(precision=3, scale=2),
               comment='Confidence score for face recognition or attendance method',
               existing_nullable=True)
    op.alter_column('attendance_records', 'method',
               existing_type=sa.Enum('manual', 'face', 'other', name='attendance_method', native_enum=False),
               type_=postgresql.ENUM('manual', 'face', 'other', name='attendance_method'),
               nullable=True,
               existing_server_default=sa.text("'manual'::attendance_method"))
    op.alter_column('attendance_records', 'status',
               existing_type=sa.Enum('present', 'absent', 'late', name='attendance_status', native_enum=False),
               type_=postgresql.ENUM('present', 'absent', 'late', name='attendance_status'),
               nullable=True,
               existing_server_default=sa.text("'present'::attendance_status"))
    op.alter_column('attendance_records', 'date',
               existing_type=sa.DateTime(),
               type_=sa.DATE(),
               existing_nullable=False)
    op.add_column('ai_insights', sa.Column('confidence_score', sa.NUMERIC(precision=3, scale=2), autoincrement=False, nullable=True))
    op.add_column('ai_insights', sa.Column('is_read', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('ai_insights', sa.Column('is_archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('ai_insights', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'ai_insights', type_='foreignkey')
    op.create_foreign_key(op.f('ai_insights_student_id_fkey'), 'ai_insights', 'students', ['student_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_ai_insights_id'), table_name='ai_insights')
    op.create_index(op.f('idx_ai_insights_unread'), 'ai_insights', ['is_read'], unique=False, postgresql_where='(is_read = false)')
    op.create_index(op.f('idx_ai_insights_type'), 'ai_insights', ['insight_type'], unique=False)
    op.create_index(op.f('idx_ai_insights_student'), 'ai_insights', ['student_id'], unique=False)
    op.create_index(op.f('idx_ai_insights_priority'), 'ai_insights', ['priority'], unique=False)
    op.create_index(op.f('idx_ai_insights_active'), 'ai_insights', ['is_archived', 'expires_at'], unique=False, postgresql_where='(is_archived = false)')
    op.alter_column('ai_insights', 'expires_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('ai_insights', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('ai_insights', 'priority',
               existing_type=sa.Enum('low', 'medium', 'high', name='insight_priority', native_enum=False),
               type_=postgresql.ENUM('low', 'medium', 'high', name='insight_priority'),
               nullable=True,
               existing_server_default=sa.text("'medium'::insight_priority"))
    op.alter_column('ai_insights', 'data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               comment='Additional data for AI insight, stored as JSONB',
               existing_nullable=True)
    op.drop_column('ai_insights', 'is_active')
    op.drop_column('ai_insights', 'confidence')
    op.drop_constraint(None, 'admins', type_='foreignkey')
    op.create_foreign_key(op.f('admins_user_id_fkey'), 'admins', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_admins_id'), table_name='admins')
    op.create_index(op.f('idx_admins_user_id'), 'admins', ['user_id'], unique=False)
    op.alter_column('admins', 'updated_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('admins', 'created_at',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('admins', 'permissions',
               existing_type=sa.JSON(),
               type_=postgresql.ARRAY(sa.TEXT()),
               postgresql_using='CASE WHEN permissions IS NULL THEN NULL ELSE ARRAY[permissions::text] END',
               comment='Array of permission strings for admin',
               existing_nullable=True)
    op.create_table('face_recognition_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('image_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('detected_faces', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('recognized_students', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('unrecognized_faces', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('processing_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('confidence_scores', postgresql.ARRAY(sa.NUMERIC(precision=3, scale=2)), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), server_default=sa.text("'success'::character varying"), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('face_recognition_logs_pkey'))
    )
    op.create_index(op.f('idx_face_logs_status'), 'face_recognition_logs', ['status'], unique=False)
    op.create_index(op.f('idx_face_logs_created'), 'face_recognition_logs', ['created_at'], unique=False)
    op.create_table('classes',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('class_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('subject', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('teacher_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('room_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIME(), autoincrement=False, nullable=False),
    sa.Column('days_of_week', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True, comment='Array of integers representing days of the week (0=Sunday, 6=Saturday)'),
    sa.Column('academic_year', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('semester', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('subject_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('teacher_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name=op.f('fk_classes_subject')),
    sa.ForeignKeyConstraint(['teacher_id'], ['users.id'], name=op.f('fk_classes_teacher')),
    sa.PrimaryKeyConstraint('id', name=op.f('classes_pkey'))
    )
    op.create_index(op.f('idx_classes_teacher'), 'classes', ['teacher_name'], unique=False)
    op.create_index(op.f('idx_classes_name_year'), 'classes', ['class_name', 'academic_year'], unique=False)
    op.create_index(op.f('idx_classes_active'), 'classes', ['is_active'], unique=False)
    # ### end Alembic commands ###
